@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
	string _title = Model.Title;
	string _titleY = Model.TitleY;
	string _titleX = Model.TitleX;
	string _suffixY = Model.SuffixY;
	List<RangeAreaDataPoint> _dataPoints = Model.DataPoints;
}

<div id="chartContainer" style="height: 300px; width: 100%;"></div>

@section scripts {

	<script>

		const _title = @(Html.Raw(JsonConvert.SerializeObject(_title)))
				const _titleY = @(Html.Raw(JsonConvert.SerializeObject(_titleY)))
				const _titleX = @(Html.Raw(JsonConvert.SerializeObject(_titleX)))
				const _suffixY = @(Html.Raw(JsonConvert.SerializeObject(_suffixY)))
				const dataPointsWithISOString = @(Html.Raw(JsonConvert.SerializeObject(_dataPoints)))

				const _dataPoints = dataPointsWithISOString.map(dp => { 
					return {
						x : new Date(dp["x"]),
						y : dp["y"],
					}
				});

		console.log(_dataPoints);

		window.onload = function () {

			var chart = new CanvasJS.Chart("chartContainer", {
				animationEnabled: true,
				exportEnabled: true,
				title: {
					text: _title
				},
				axisY: {
					title: _titleY,
					suffix: _suffixY
				},
				axisX: {
					valueFormatString: "DD MMMM",
					title: _titleX,
				},
				data: [
					{
						type: "rangeArea",
						xValueFormatString: "DD MMMM",
						yValueFormatString: "#0.## °C",
						toolTipContent: " <span style=\"color:#4F81BC\">{x}</span><br><b>Min:</b> {y[0]}<br><b>Max:</b> {y[1]}",
						dataPoints: _dataPoints
					}]
			});
			chart.render();

		}
	</script>
}